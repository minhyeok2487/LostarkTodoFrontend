{"ast":null,"code":"import { API_BASE_URL } from \"./guide-config\";\nexport function call(api, method, request) {\n  let headers = new Headers({\n    \"Content-Type\": \"application/json\"\n  });\n\n  // 로컬 스토리지에서 ACCESS TOKEN 가져오기\n  const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\n  if (accessToken && accessToken !== null) {\n    headers.append(\"Authorization\", \"Bearer \" + accessToken);\n  }\n  let options = {\n    headers: headers,\n    url: API_BASE_URL + api,\n    method: method\n  };\n  if (request) {\n    options.body = JSON.stringify(request);\n  }\n  return fetch(options.url, options).then(response => {\n    if (response.status === 200) {\n      return response.json();\n    } else if (response.status === 403) {\n      window.location.href = \"/login\";\n      throw response.json();\n    } else {\n      throw response.json();\n    }\n  }).catch(error => {\n    return error.then(errorMessage => {\n      throw errorMessage;\n    });\n  });\n}\nexport function login(userDTO) {\n  return call(\"/auth/login\", \"POST\", userDTO).then(response => {\n    if (response.token) {\n      // 로컬 스토리지에 토큰 저장\n      localStorage.setItem(\"ACCESS_TOKEN\", response.token);\n      // token이 존재하는 경우 Todo 화면으로 리디렉트\n      window.location.href = \"/\";\n    }\n  });\n}\nexport function logout() {\n  call(\"/auth/logout\", \"GET\", null).then(response => {});\n  localStorage.setItem(\"ACCESS_TOKEN\", null);\n  window.location.href = \"/login\";\n}\nexport function signup(userDTO) {\n  return call(\"/member/signup\", \"POST\", userDTO);\n}\nexport function socialLogin(provider) {\n  const frontendUrl = window.location.protocol + \"//\" + window.location.host;\n  window.location.href = API_BASE_URL + \"/auth/authorize/\" + provider + \"?redirect_url=\" + frontendUrl;\n}","map":{"version":3,"names":["API_BASE_URL","call","api","method","request","headers","Headers","accessToken","localStorage","getItem","append","options","url","body","JSON","stringify","fetch","then","response","status","json","window","location","href","catch","error","errorMessage","login","userDTO","token","setItem","logout","signup","socialLogin","provider","frontendUrl","protocol","host"],"sources":["C:/Users/Admin/Desktop/로아투두/LostarkTodoFrontend/src/guide/guide-service.jsx"],"sourcesContent":["import { API_BASE_URL } from \"./guide-config\";\r\n\r\nexport function call(api, method, request) {\r\n  let headers = new Headers({\r\n    \"Content-Type\": \"application/json\",\r\n  });\r\n\r\n  // 로컬 스토리지에서 ACCESS TOKEN 가져오기\r\n  const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\r\n  if (accessToken && accessToken !== null) {\r\n    headers.append(\"Authorization\", \"Bearer \" + accessToken);\r\n  }\r\n\r\n  let options = {\r\n    headers: headers,\r\n    url: API_BASE_URL + api,\r\n    method: method,\r\n  };\r\n\r\n  if (request) {\r\n    options.body = JSON.stringify(request);\r\n  }\r\n\r\n  return fetch(options.url, options).then((response) => {\r\n    if (response.status === 200) {\r\n      return response.json();\r\n    } else if (response.status === 403) {\r\n      window.location.href = \"/login\";\r\n      throw response.json();\r\n    } else {\r\n      throw response.json();\r\n    }\r\n  }).catch((error) => {\r\n    return error.then((errorMessage) => {\r\n      throw errorMessage;\r\n    });\r\n  });\r\n}\r\n\r\nexport function login(userDTO) {\r\n  return call(\"/auth/login\", \"POST\", userDTO)\r\n    .then((response) => {\r\n      if (response.token) {\r\n        // 로컬 스토리지에 토큰 저장\r\n        localStorage.setItem(\"ACCESS_TOKEN\", response.token);\r\n        // token이 존재하는 경우 Todo 화면으로 리디렉트\r\n        window.location.href = \"/\";\r\n      }\r\n    });\r\n}\r\n\r\nexport function logout() {\r\n  call(\"/auth/logout\", \"GET\", null).then((response) => {});\r\n  localStorage.setItem(\"ACCESS_TOKEN\", null);\r\n  window.location.href = \"/login\";\r\n}\r\n\r\nexport function signup(userDTO) {\r\n  return call(\"/member/signup\", \"POST\", userDTO);\r\n}\r\n\r\nexport function socialLogin(provider) {\r\n  const frontendUrl = window.location.protocol + \"//\" + window.location.host;\r\n  window.location.href = API_BASE_URL + \"/auth/authorize/\" + provider + \"?redirect_url=\" + frontendUrl;\r\n\r\n}"],"mappings":"AAAA,SAASA,YAAY,QAAQ,gBAAgB;AAE7C,OAAO,SAASC,IAAIA,CAACC,GAAG,EAAEC,MAAM,EAAEC,OAAO,EAAE;EACzC,IAAIC,OAAO,GAAG,IAAIC,OAAO,CAAC;IACxB,cAAc,EAAE;EAClB,CAAC,CAAC;;EAEF;EACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EACxD,IAAIF,WAAW,IAAIA,WAAW,KAAK,IAAI,EAAE;IACvCF,OAAO,CAACK,MAAM,CAAC,eAAe,EAAE,SAAS,GAAGH,WAAW,CAAC;EAC1D;EAEA,IAAII,OAAO,GAAG;IACZN,OAAO,EAAEA,OAAO;IAChBO,GAAG,EAAEZ,YAAY,GAAGE,GAAG;IACvBC,MAAM,EAAEA;EACV,CAAC;EAED,IAAIC,OAAO,EAAE;IACXO,OAAO,CAACE,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACX,OAAO,CAAC;EACxC;EAEA,OAAOY,KAAK,CAACL,OAAO,CAACC,GAAG,EAAED,OAAO,CAAC,CAACM,IAAI,CAAEC,QAAQ,IAAK;IACpD,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MAC3B,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;IACxB,CAAC,MAAM,IAAIF,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MAClCE,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MAC/B,MAAML,QAAQ,CAACE,IAAI,CAAC,CAAC;IACvB,CAAC,MAAM;MACL,MAAMF,QAAQ,CAACE,IAAI,CAAC,CAAC;IACvB;EACF,CAAC,CAAC,CAACI,KAAK,CAAEC,KAAK,IAAK;IAClB,OAAOA,KAAK,CAACR,IAAI,CAAES,YAAY,IAAK;MAClC,MAAMA,YAAY;IACpB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,OAAO,SAASC,KAAKA,CAACC,OAAO,EAAE;EAC7B,OAAO3B,IAAI,CAAC,aAAa,EAAE,MAAM,EAAE2B,OAAO,CAAC,CACxCX,IAAI,CAAEC,QAAQ,IAAK;IAClB,IAAIA,QAAQ,CAACW,KAAK,EAAE;MAClB;MACArB,YAAY,CAACsB,OAAO,CAAC,cAAc,EAAEZ,QAAQ,CAACW,KAAK,CAAC;MACpD;MACAR,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;IAC5B;EACF,CAAC,CAAC;AACN;AAEA,OAAO,SAASQ,MAAMA,CAAA,EAAG;EACvB9B,IAAI,CAAC,cAAc,EAAE,KAAK,EAAE,IAAI,CAAC,CAACgB,IAAI,CAAEC,QAAQ,IAAK,CAAC,CAAC,CAAC;EACxDV,YAAY,CAACsB,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;EAC1CT,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;AACjC;AAEA,OAAO,SAASS,MAAMA,CAACJ,OAAO,EAAE;EAC9B,OAAO3B,IAAI,CAAC,gBAAgB,EAAE,MAAM,EAAE2B,OAAO,CAAC;AAChD;AAEA,OAAO,SAASK,WAAWA,CAACC,QAAQ,EAAE;EACpC,MAAMC,WAAW,GAAGd,MAAM,CAACC,QAAQ,CAACc,QAAQ,GAAG,IAAI,GAAGf,MAAM,CAACC,QAAQ,CAACe,IAAI;EAC1EhB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGvB,YAAY,GAAG,kBAAkB,GAAGkC,QAAQ,GAAG,gBAAgB,GAAGC,WAAW;AAEtG"},"metadata":{},"sourceType":"module","externalDependencies":[]}